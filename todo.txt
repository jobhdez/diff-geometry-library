* TODO rewrite in haskell
* TODO figure a typeclass for functions or something like the ocaml book
* DONE Automatic differentiation
I should be able to do most of the partial derivatives;

** TODO extend this dual number system to include tensors :-)

** TODO need to figure out how to connect the functions to the evaluation and derivative ie dual number
how to represent the users initial function?
  build a language/compiler
    do something like this https://simon.peytonjones.org/assets/pdfs/higher-order-ad.pdf
    although as a user do i want to mess with a whole language?
    how would i express some spacetime metric?
    or a language for diff geometry
    by making a language you add expressiveness. the user can express
    general realtivty better but they need to learn a language but this would be
    simple. the language would target the dual number library.
** TODO calculate  christoffel symbols
** TODO riemann curvature tensor given christoffel symbols
** TODO ricci tensor from riemann curvature tensor
** TODO scalar curvature
** TODO einstein tensor: ric-g*scalarCurvature/2
** TODO a zero matrix means no matter or non gravitation fields are present
- this related to black holes
** TODO it would be nice if i can calculate the solution that predicts the expansion of the universe ie cosmology spacetime
- evidence that the universe had a beginning which may have some philosophical implication
- also compute the curvature of spheres. you do this with riemann tensor
- you need to model differential geometry right. your code needs to make conceptual sense,
  not just work.
- understand the embedding problem by implementing it https://mccuan.math.gatech.edu/courses/6455/BenAndrewsEmbedding.pdf
